--- # AWS EC2 VPC with bastion and NAT
- hosts: localhost
  connection: local
  remote_user: test
  become: yes
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Create a VPC
    ec2_vpc_net:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      name: Security-VPC
      state: present
      cidr_block: 10.0.0.0/16
    register: my_vpc

  - name: Set VPC ID in var
    set_fact:
      vpc_id: "{{ my_vpc.vpc.id }}"

  - name: Create IGW
    ec2_vpc_igw:
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
    register: my_vpc_igw

  - name: Set IGW ID in var
    set_fact:
      igw_id: "{{ my_vpc_igw.gateway_id }}"

  - name: Create Public1 Subnet
    ec2_vpc_subnet:
      resource_tags:
        Name: SecSubnet1-Public
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      cidr: 10.0.1.0/24
      az: us-east-1a
    register: public1_subnet

  - name: Set Public Subnet ID in var
    set_fact:
      public1_subnet_id: "{{ public1_subnet.subnet.id }}"

  - name: Create Public2 Subnet
    ec2_vpc_subnet:
      resource_tags:
        Name: SecSubnet2-Public
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      cidr: 10.0.2.0/24
      az: us-east-1b
    register: public2_subnet

  - name: Set Public Subnet ID in var
    set_fact:
      public2_subnet_id: "{{ public2_subnet.subnet.id }}"

  - name: Create Private3 Subnet
    ec2_vpc_subnet:
      resource_tags:
        Name: SecSubnet3-Private
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      cidr: 10.0.3.0/24
      az: us-east-1a
    register: private3_subnet

  - name: Set Public Subnet ID in var
    set_fact:
      private3_subnet_id: "{{ private3_subnet.subnet.id }}"

  - name: Create Private4 Subnet
    ec2_vpc_subnet:
      resource_tags:
        Name: SecSubnet4-Private
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      cidr: 10.0.4.0/24
      az: us-east-1b
    register: private4_subnet

  - name: Set Public Subnet ID in var
    set_fact:
      private4_subnet_id: "{{ private4_subnet.subnet.id }}"

  - name: Create NAT Gateway
    ec2_vpc_nat_gateway:
      state: present
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      subnet_id: "{{ public2_subnet_id }}"
    register: nat_gw

  - name: Set NAT Gateway ID in var
    set_fact:
      nat_gw_id: "{{ nat_gw.nat_gateway_id }}"
      

  - name: Create Public Route Table
    ec2_vpc_route_table:
      tags:
        Name: SecRT-Public
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      subnets:
        - "{{ public1_subnet_id }}"
        - "{{ public2_subnet_id }}"
      routes:
        - dest: "0.0.0.0/0"
          gateway_id: "{{ igw_id }}"

  - name: Create Private Route Table
    ec2_vpc_route_table:
      tags:
        Name: SecRT-Private
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      subnets:
        - "{{ private3_subnet_id }}"
        - "{{ private4_subnet_id }}"
      routes:
        - dest: "0.0.0.0/0"
          gateway_id: "{{ nat_gw_id }}"

  - name: Create EC2 Security Group
    ec2_group:
      name: "SecSG-EC2-Private"
      description: "SecSG-EC2-Private"
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      rules:
        - proto: "tcp"
          from_port: "22"
          to_port: "22"
          cidr_ip: 0.0.0.0/0
        - proto: "tcp"
          from_port: "80"
          to_port: "80"
          cidr_ip: 0.0.0.0/0

  - name: Create Bastion Security Group
    ec2_group:
      name: "SecSG-Bastion"
      description: "SecSG-Bastion"
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      rules:
        - proto: "tcp"
          from_port: "22"
          to_port: "22"
          cidr_ip: 0.0.0.0/0

  - name: Create Private EC2 instance
    ec2:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      key_name: mylatest-key-pair-usnva
      image: ami-b70554c8
      instance_type: t2.micro
      group: SecSG-EC2-Private
      vpc_subnet_id: "{{ private3_subnet_id }}"
      instance_tags:
        Name: Web1
    register: Web1

  - name: Store Web1 Instance ID in var
    set_fact:
      web1_id: "{{ Web1.instance_ids }}"

  - name: Create 2nd Private EC2 instance
    ec2:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      key_name: mylatest-key-pair-usnva
      image: ami-b70554c8
      instance_type: t2.micro
      group: SecSG-EC2-Private
      vpc_subnet_id: "{{ private4_subnet_id }}"
      instance_tags:
        Name: Web2
    register: Web2

  - name: Store Web2 Instance ID in var
    set_fact:
      web2_id: "{{ Web2.instance_ids }}"

  - name: Create Bastion EC2 instance
    ec2:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      key_name: mylatest-key-pair-usnva
      image: ami-b70554c8
      instance_type: t2.micro
      group: SecSG-Bastion
      assign_public_ip: yes
      vpc_subnet_id: "{{ public1_subnet_id }}"
      instance_tags:
        Name: Bastion
    register: bastion