--- # AWS ALM VPC Creation
- hosts: localhost
  connection: local
  remote_user: test
  become: yes
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Create a VPC
    ec2_vpc_net:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      name: alm-test-vpc
      state: present
      cidr_block: 10.0.0.0/22
    register: my_vpc

  - name: Set VPC ID in var
    set_fact:
      vpc_id: "{{ my_vpc.vpc.id }}"

  - name: Create IGW
    ec2_vpc_igw:
      resource_tags:
        Name: alm-test-igw
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
    register: my_vpc_igw

  - name: Set IGW ID in var
    set_fact:
      igw_id: "{{ my_vpc_igw.gateway_id }}"

  - name: Create Pub1 Subnet
    ec2_vpc_subnet:
      resource_tags:
        Name: alm-test-pub1Subnet
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      cidr: 10.0.0.0/24
      az: us-east-1a
    register: pub1_subnet

  - name: Set Public Subnet ID in var
    set_fact:
      pub1_subnet_id: "{{ pub1_subnet.subnet.id }}"

  - name: Create Pub2 Subnet
    ec2_vpc_subnet:
      resource_tags:
        Name: alm-test-pub2Subnet
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      cidr: 10.0.1.0/24
      az: us-east-1a
    register: pub2_subnet

  - name: Set Public Subnet ID in var
    set_fact:
      pub2_subnet_id: "{{ pub2_subnet.subnet.id }}"

  - name: Create Priv Subnet
    ec2_vpc_subnet:
      resource_tags:
        Name: alm-test-privSubnet
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      cidr: 10.0.2.0/24
      az: us-east-1a
    register: priv_subnet

  - name: Set Public Subnet ID in var
    set_fact:
      priv_subnet_id: "{{ priv_subnet.subnet.id }}"

  - name: Create DB Subnet
    ec2_vpc_subnet:
      resource_tags:
        Name: alm-test-dbSubnet
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      cidr: 10.0.3.0/24
      az: us-east-1f
    register: db_subnet

  - name: Set Public Subnet ID in var
    set_fact:
      db_subnet_id: "{{ db_subnet.subnet.id }}"

  - name: Create  Route Table
    ec2_vpc_route_table:
      tags:
        Name: alm-test-RT
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      subnets:
        - "{{ pub1_subnet_id }}"
        - "{{ pub2_subnet_id }}"
        - "{{ priv_subnet_id }}"
        - "{{ db_subnet_id }}"
      routes:
        - dest: "0.0.0.0/0"
          gateway_id: "{{ igw_id }}"

  - name: Create NACL
    ec2_vpc_nacl:
      name: alm-test-nacl
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      subnets:
        - "{{ pub1_subnet_id }}"
        - "{{ pub2_subnet_id }}"
        - "{{ priv_subnet_id }}"
        - "{{ db_subnet_id }}"
      ingress: [
        # rule no, protocol, allow/deny, cidr, icmp_code, icmp_type, port from, port to
        [100, 'all', 'allow', '0.0.0.0/0', null, null, null, null],
      ]
      egress: [
        [100, 'all', 'allow', '0.0.0.0/0', null, null, null, null],
      ]

  - name: Create Jumphost Security Group
    ec2_group:
      name: alm-test-jump
      description: alm-test-jump
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      rules:
        - proto: "tcp"
          from_port: "80"
          to_port: "80"
          cidr_ip: 0.0.0.0/0
        - proto: "tcp"
          ports: 8080
          cidr_ip:
            - 128.107.241.0/24
            - 171.71.174.0/24
            - 173.38.117.0/24
            - 64.102.0.0/16
        - proto: "tcp"
          ports: 22
          cidr_ip:
            - 128.107.241.0/24
            - 171.70.36.55/32
            - 171.71.174.0/24
            - 173.38.117.0/24
            - 64.102.0.0/16
            - 64.102.100.220/32
            - 64.102.100.221/32
        - proto: "tcp"
          ports: 6379
          cidr_ip:
            - 128.107.241.0/24
            - 64.102.0.0/16
            - 173.38.117.0/24
            - 171.71.174.0/24
        - proto: "tcp"
          ports: 8081
          cidr_ip:
            - 128.107.241.0/24
            - 64.102.0.0/16
            - 173.38.117.0/24
            - 171.71.174.0/24
    register: jump_sg

  - name: Set Jump Security Group ID in var
    set_fact:
      jump_sg_id: "{{ jump_sg.group_id }}"

  - name: Create WebApps Security Group
    ec2_group:
      name: alm-test-webapps
      description: alm-test-webapps
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      rules:
        - proto: "tcp"
          ports:
            - 8443
            - 80
            - 443
          cidr_ip: 0.0.0.0/0
        - proto: "tcp"
          ports: 22
          group_id: "{{ jump_sg_id }}"
    register: webapps_sg

  - name: Set WebApps Group ID in var
    set_fact:
      webapps_sg_id: "{{ webapps_sg.group_id }}"

  - name: Create Database Security Group
    ec2_group:
      name: alm-test-db
      description: alm-test-db
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      rules:
        - proto: "tcp"
          ports: 5432
          group_id: "{{ webapps_sg_id }}"
        - proto: "tcp"
          ports:
            - 22
            - 6739
          group_id: "{{ jump_sg_id }}"
        - proto: "tcp"
          ports: 5493
          cidr_ip: 0.0.0.0/0
    register: database_sg

  - name: Create Kali Security Group
    ec2_group:
      name: alm-test-kali
      description: alm-test-kali
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      rules:
        - proto: "tcp"
          ports: 22
          cidr_ip: 0.0.0.0/0
        - proto: "tcp"
          ports: 80
          group_id: "{{ jump_sg_id }}"
        - proto: "tcp"
          ports: 443
          cidr_ip: 0.0.0.0/0
    register: kali_sg

  - name: Create Monitor Security Group
    ec2_group:
      name: alm-test-monitor
      description: alm-test-monitor
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      rules:
        - proto: "tcp"
          ports: 22
          group_id: "{{ jump_sg_id }}"
        - proto: "tcp"
          ports:
            - 5044
            - 9200
          group_id: "{{ webapps_sg_id }}"
        - proto: "tcp"
          ports:
            - 5601
          cidr_ip:
            - 128.107.241.0/24
            - 171.71.174.0/24
            - 173.38.117.0/24
            - 64.102.0.0/16
    register: monitor_sg

  - name: Create Private EC2 instance
    ec2:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      key_name: mylatest-key-pair-usnva
      image: ami-b70554c8
      instance_type: t2.micro
      group: SecSG-EC2-Private
      vpc_subnet_id: "{{ private3_subnet_id }}"
      instance_tags:
        Name: Web1
    register: Web1

  - name: Store Web1 Instance ID in var
    set_fact:
      web1_id: "{{ Web1.instance_ids }}"

  - name: Create 2nd Private EC2 instance
    ec2:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      key_name: mylatest-key-pair-usnva
      image: ami-b70554c8
      instance_type: t2.micro
      group: SecSG-EC2-Private
      vpc_subnet_id: "{{ private4_subnet_id }}"
      instance_tags:
        Name: Web2
    register: Web2

  - name: Store Web2 Instance ID in var
    set_fact:
      web2_id: "{{ Web2.instance_ids }}"

  - name: Create Bastion EC2 instance
    ec2:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      key_name: mylatest-key-pair-usnva
      image: ami-b70554c8
      instance_type: t2.micro
      group: SecSG-Bastion
      assign_public_ip: yes
      vpc_subnet_id: "{{ public1_subnet_id }}"
      instance_tags:
        Name: Bastion
      wait: yes
    register: bastion