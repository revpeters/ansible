--- # AWS VPC Infra example build
- hosts: localhost
  connection: local
  remote_user: test
  become: yes
  gather_facts: no
  vars_files:
  - files/awscreds.yml
  tasks:
  - name: Create a VPC
    ec2_vpc_net:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      name: Cisco-VPC
      state: present
      cidr_block: 10.0.0.0/16
    register: my_vpc

  - name: Set VPC ID in var
    set_fact:
      vpc_id: "{{ my_vpc.vpc.id }}"

  - name: Create IGW
    ec2_vpc_igw:
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
    register: my_vpc_igw

  - name: Set IGW ID in var
    set_fact:
      igw_id: "{{ my_vpc_igw.gateway_id }}"

  - name: Create Public1 Subnet
    ec2_vpc_subnet:
      resource_tags:
        Name: Subnet1-Public
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      cidr: 10.0.1.0/24
      az: us-east-1a
    register: public1_subnet

  - name: Set Public Subnet ID in var
    set_fact:
      public1_subnet_id: "{{ public1_subnet.subnet.id }}"

  - name: Create Public2 Subnet
    ec2_vpc_subnet:
      resource_tags:
        Name: Subnet2-Public
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      cidr: 10.0.2.0/24
      az: us-east-1b
    register: public2_subnet

  - name: Set Public Subnet ID in var
    set_fact:
      public2_subnet_id: "{{ public2_subnet.subnet.id }}"

  - name: Create Private3 Subnet
    ec2_vpc_subnet:
      resource_tags:
        Name: Subnet3-Private
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      cidr: 10.0.3.0/24
      az: us-east-1a
    register: private3_subnet

  - name: Set Public Subnet ID in var
    set_fact:
      private3_subnet_id: "{{ private3_subnet.subnet.id }}"

  - name: Create Private4 Subnet
    ec2_vpc_subnet:
      resource_tags:
        Name: Subnet4-Private
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      cidr: 10.0.4.0/24
      az: us-east-1b
    register: private4_subnet

  - name: Set Public Subnet ID in var
    set_fact:
      private4_subnet_id: "{{ private4_subnet.subnet.id }}"

  - name: Set Public Subnet ID in var
    set_fact:
      private4_subnet_id: "{{ private4_subnet.subnet.id }}"
      
  - name: Create Public Route Table
    ec2_vpc_route_table:
      tags:
        Name: RT-Public
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      subnets:
        - "{{ public1_subnet_id }}"
        - "{{ public2_subnet_id }}"
      routes:
        - dest: "0.0.0.0/0"
          gateway_id: "{{ igw_id }}"

  - name: Create Private Route Table
    ec2_vpc_route_table:
      tags:
        Name: RT-Private
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      subnets:
        - "{{ private3_subnet_id }}"
        - "{{ private4_subnet_id }}"
      routes:
        - dest: "0.0.0.0/0"

  - name: Create NACL1
    ec2_vpc_nacl:
      name: PgresNACL1
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      subnets:
        - "{{ public1_subnet_id }}"
        - "{{ private3_subnet_id }}"
      ingress: [
        [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 22, 22],
        [110, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80],
      ]
      egress: [
        [100, 'all', 'allow', '0.0.0.0/0', null, null, null, null],
      ]

  - name: Create NACL2
    ec2_vpc_nacl:
      name: AtlassianNACL2
      state: present
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      subnets:
        - "{{ public2_subnet_id }}"
        - "{{ private4_subnet_id }}"
      ingress: [
        [100, 'tcp', 'allow', '0.0.0.0/0', null, null, 22, 22],
        [110, 'tcp', 'allow', '0.0.0.0/0', null, null, 80, 80],
        [120, 'tcp', 'allow', '0.0.0.0/0', null, null, 5432, 5432],
      ]
      egress: [
        [100, 'all', 'allow', '0.0.0.0/0', null, null, null, null],
      ]

  - name: Create Atlassian Security Group
    ec2_group:
      name: "SecSG-Atlassian-Private"
      description: "SecSG-Atlassian-Private"
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      rules:
        - proto: "tcp"
          from_port: "22"
          to_port: "22"
          cidr_ip: 0.0.0.0/0
        - proto: "tcp"
          from_port: "80"
          to_port: "80"
          cidr_ip: 0.0.0.0/0

  - name: Create Postgres Security Group
    ec2_group:
      name: "SecSG-PGRES-Private"
      description: "SecSG-PGRES-Private"
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      rules:
        - proto: "tcp"
          from_port: "5432"
          to_port: "5432"
          cidr_ip: 0.0.0.0/0
        - proto: "tcp"
          from_port: "22"
          to_port: "22"
          cidr_ip: 0.0.0.0/0
        - proto: "tcp"
          from_port: "80"
          to_port: "80"
          cidr_ip: 0.0.0.0/0

  - name: Create Bastion Security Group
    ec2_group:
      name: "SecSG-Bastion"
      description: "SecSG-Bastion"
      vpc_id: "{{ vpc_id }}"
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      rules:
        - proto: "tcp"
          from_port: "22"
          to_port: "22"
          cidr_ip: 0.0.0.0/0

  - name: Create Bastion instance
    ec2:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      key_name: mylatest-key-pair-usnva
      image: ami-b70554c8
      instance_type: t2.micro
      volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: 10
        delete_on_termination: yes
      group: SecSG-Bastion
      assign_public_ip: yes
      vpc_subnet_id: "{{ public1_subnet_id }}"
      instance_tags:
        Name: Bastion
    register: bastion

  - name: Create Private JIRA instance
    ec2:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      key_name: mylatest-key-pair-usnva
      image: ami-b70554c8
      instance_type: t2.micro
      volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: 120
        delete_on_termination: yes
      group: SecSG-Atlassian-Private
      assign_public_ip: yes
      vpc_subnet_id: "{{ private3_subnet_id }}"
      instance_tags:
        Name: JIRA
    register: JIRA

  - name: Store JIRA Instance ID in var
    set_fact:
      JIRA_id: "{{ JIRA.instance_ids }}"

  - name: Create Private Confluence instance
    ec2:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      key_name: mylatest-key-pair-usnva
      image: ami-b70554c8
      instance_type: t2.micro
      volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: 200
        delete_on_termination: yes
      group: SecSG-Atlassian-Private
      assign_public_ip: yes
      vpc_subnet_id: "{{ private3_subnet_id }}"
      instance_tags:
        Name: CONFLUENCE
    register: CONFLUENCE

  - name: Store CONFLUENCE Instance ID in var
    set_fact:
      CONFLUENCE_id: "{{ CONFLUENCE.instance_ids }}"

  - name: Create Private PGPOOL instance
    ec2:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      key_name: mylatest-key-pair-usnva
      image: ami-b70554c8
      instance_type: t2.micro
      volumes:
      - device_name: /dev/sdb
        volume_type: gp2
        volume_size: 100
        delete_on_termination: yes
      group: SecSG-PGRES-Private
      assign_public_ip: yes
      vpc_subnet_id: "{{ private4_subnet_id }}"
      instance_tags:
        Name: PGPOOL
    register: PGPOOL

  - name: Store PGPOOL Instance ID in var
    set_fact:
      PGPOOL_id: "{{ PGPOOL.instance_ids }}"

  - name: Create Private PGRES1 instance
    ec2:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      key_name: mylatest-key-pair-usnva
      image: ami-b70554c8
      instance_type: t2.micro
      volumes:
      - device_name: /dev/sdb
        volume_type: gp2
        volume_size: 100
        delete_on_termination: yes
      group: SecSG-PGRES-Private
      assign_public_ip: yes
      vpc_subnet_id: "{{ private4_subnet_id }}"
      instance_tags:
        Name: PGRES1
    register: PGRES1

  - name: Store PGRES1 Instance ID in var
    set_fact:
      PGRES1_id: "{{ PGRES1.instance_ids }}"

  - name: Create Private PGRES2 instance
    ec2:
      aws_access_key: "{{ aws_id }}"
      aws_secret_key: "{{ aws_key }}"
      region: "{{ aws_region }}"
      key_name: mylatest-key-pair-usnva
      image: ami-b70554c8
      instance_type: t2.micro
      volumes:
      - device_name: /dev/sdb
        volume_type: gp2
        volume_size: 100
        delete_on_termination: yes
      group: SecSG-PGRES-Private
      assign_public_ip: yes
      vpc_subnet_id: "{{ private4_subnet_id }}"
      instance_tags:
        Name: PGRES2
    register: PGRES2

  - name: Store PGRES2 Instance ID in var
    set_fact:
      PGRES2_id: "{{ PGRES2.instance_ids }}"