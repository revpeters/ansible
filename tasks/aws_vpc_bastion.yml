--- # AWS ALM VPC Creation
- hosts: localhost
  connection: local
  remote_user: jacopete
  become: no
  gather_facts: no
  vars_files:
    - ../vars/control.yml
  tasks:
  - name: Create a VPC
    ec2_vpc_net:
      region: "{{ region }}"
      name: alm-{{ customer_name }}-vpc
      state: present
      cidr_block: 10.0.0.0/22
    register: my_vpc

  - name: Set VPC ID in var
    set_fact:
      vpc_id: "{{ my_vpc.vpc.id }}"

  - name: Create IGW
    ec2_vpc_igw:
      resource_tags:
        Name: alm-{{ customer_name }}-igw
      state: present
      vpc_id: "{{ vpc_id }}"
      region: "{{ region }}"
    register: my_vpc_igw

  - name: Set IGW ID in var
    set_fact:
      igw_id: "{{ my_vpc_igw.gateway_id }}"

  - name: Create Public Subnet
    ec2_vpc_subnet:
      resource_tags:
        Name: alm-{{ customer_name }}-publicSubnet
      state: present
      vpc_id: "{{ vpc_id }}"
      region: "{{ region }}"
      cidr: 10.0.0.0/24
      az: us-east-1a
    register: public_subnet

  - name: Create Private Subnet
    ec2_vpc_subnet:
      resource_tags:
        Name: alm-{{ customer_name }}-privateSubnet
      state: present
      vpc_id: "{{ vpc_id }}"
      region: "{{ region }}"
      cidr: 10.0.1.0/24
      az: us-east-1a
    register: private_subnet

  - name: Create DB Subnet
    ec2_vpc_subnet:
      resource_tags:
        Name: alm-{{ customer_name }}-dbSubnet-1
      state: present
      vpc_id: "{{ vpc_id }}"
      region: "{{ region }}"
      cidr: 10.0.2.0/24
      az: us-east-1f
    register: db_subnet_1
    
  - name: Create DB Subnet
    ec2_vpc_subnet:
      resource_tags:
        Name: alm-{{ customer_name }}-dbSubnet-2
      state: present
      vpc_id: "{{ vpc_id }}"
      region: "{{ region }}"
      cidr: 10.0.3.0/24
      az: us-east-1e
    register: db_subnet_2

  - name: Set Public Subnet ID in var
    set_fact:
      public_subnet_id: "{{ public_subnet.subnet.id }}"

  - name: Set Private Subnet ID in var
    set_fact:
      private_subnet_id: "{{ private_subnet.subnet.id }}"

  - name: Set Database Subnet ID in var
    set_fact:
      db_subnet_1_id: "{{ db_subnet_1.subnet.id }}"
      
  - name: Set Database Subnet ID in var
    set_fact:
      db_subnet_2_id: "{{ db_subnet_2.subnet.id }}"

  - name: Create  Route Table
    ec2_vpc_route_table:
      tags:
        Name: alm-{{ customer_name }}-RT
      state: present
      vpc_id: "{{ vpc_id }}"
      region: "{{ region }}"
      subnets:
        - "{{ public_subnet_id }}"
        - "{{ private_subnet_id }}"
        - "{{ db_subnet_1_id }}"
        - "{{ db_subnet_2_id }}"
      routes:
        - dest: "0.0.0.0/0"
          gateway_id: "{{ igw_id }}"

  - name: Create NACL
    ec2_vpc_nacl:
      name: alm-{{ customer_name }}-nacl
      state: present
      vpc_id: "{{ vpc_id }}"
      region: "{{ region }}"
      subnets:
        - "{{ public_subnet_id }}"
        - "{{ private_subnet_id }}"
        - "{{ db_subnet_1_id }}"
        - "{{ db_subnet_2_id }}"
      ingress: [
        # rule no, protocol, allow/deny, cidr, icmp_code, icmp_type, port from, port to
        [100, 'all', 'allow', '0.0.0.0/0', null, null, null, null],
      ]
      egress: [
        [100, 'all', 'allow', '0.0.0.0/0', null, null, null, null],
      ]

  - name: Create Jumphost Security Group
    ec2_group:
      name: alm-{{ customer_name }}-jump
      description: alm-{{ customer_name }}-jump
      vpc_id: "{{ vpc_id }}"
      region: "{{ region }}"
      rules:
        - proto: "tcp"
          from_port: "80"
          to_port: "80"
          cidr_ip: 0.0.0.0/0
        - proto: "tcp"
          ports: 8080
          cidr_ip:
            - 128.107.241.0/24
            - 171.71.174.0/24
            - 173.38.117.0/24
            - 64.102.0.0/16
        - proto: "tcp"
          ports: 22
          cidr_ip:
            - 128.107.241.0/24
            - 171.70.36.55/32
            - 171.71.174.0/24
            - 173.38.117.0/24
            - 64.102.0.0/16
            - 64.102.100.220/32
            - 64.102.100.221/32
        - proto: "tcp"
          ports: 6379
          cidr_ip:
            - 128.107.241.0/24
            - 64.102.0.0/16
            - 173.38.117.0/24
            - 171.71.174.0/24
        - proto: "tcp"
          ports: 8081
          cidr_ip:
            - 128.107.241.0/24
            - 64.102.0.0/16
            - 173.38.117.0/24
            - 171.71.174.0/24
    register: jump_sg

  - name: Set Jump Security Group ID in var
    set_fact:
      jump_sg_id: "{{ jump_sg.group_id }}"

  - name: Create WebApps Security Group
    ec2_group:
      name: alm-{{ customer_name }}-webapps
      description: alm-{{ customer_name }}-webapps
      vpc_id: "{{ vpc_id }}"
      region: "{{ region }}"
      rules:
        - proto: "tcp"
          ports:
            - 8443
            - 80
            - 443
            - 8080
            - 8090
          cidr_ip: 0.0.0.0/0
        - proto: "tcp"
          ports: 22
          group_id: "{{ jump_sg_id }}"
    register: webapps_sg

  - name: Set WebApps Group ID in var
    set_fact:
      webapps_sg_id: "{{ webapps_sg.group_id }}"

  - name: Create Database Security Group
    ec2_group:
      name: alm-{{ customer_name }}-db
      description: alm-{{ customer_name }}-db
      vpc_id: "{{ vpc_id }}"
      region: "{{ region }}"
      rules:
        - proto: "tcp"
          ports: 5432
          group_id: "{{ webapps_sg_id }}"
        - proto: "tcp"
          ports:
            - 22
            - 6739
          group_id: "{{ jump_sg_id }}"
        - proto: "tcp"
          ports: 5493
          cidr_ip: 0.0.0.0/0
    register: database_sg

  - name: Create Kali Security Group
    ec2_group:
      name: alm-{{ customer_name }}-kali
      description: alm-{{ customer_name }}-kali
      vpc_id: "{{ vpc_id }}"
      region: "{{ region }}"
      rules:
        - proto: "tcp"
          ports: 22
          cidr_ip: 0.0.0.0/0
        - proto: "tcp"
          ports: 80
          group_id: "{{ jump_sg_id }}"
        - proto: "tcp"
          ports: 443
          cidr_ip: 0.0.0.0/0
    register: kali_sg

  - name: Create Monitor Security Group
    ec2_group:
      name: alm-{{ customer_name }}-monitor
      description: alm-{{ customer_name }}-monitor
      vpc_id: "{{ vpc_id }}"
      region: "{{ region }}"
      rules:
        - proto: "tcp"
          ports: 22
          group_id: "{{ jump_sg_id }}"
        - proto: "tcp"
          ports:
            - 5044
            - 9200
          group_id: "{{ webapps_sg_id }}"
        - proto: "tcp"
          ports:
            - 5601
          cidr_ip:
            - 128.107.241.0/24
            - 171.71.174.0/24
            - 173.38.117.0/24
            - 64.102.0.0/16
    register: monitor_sg

  - name: Create Web App EC2 instance
    ec2:
      region: "{{ region }}"
      key_name: "{{ ec2_key }}"
      image: ami-0de53d8956e8dcf80
      instance_type: t2.micro
      group_id: "{{ webapps_sg_id }}"
      vpc_subnet_id: "{{ private_subnet_id }}"
      assign_public_ip: yes
      private_ip: 10.0.1.34
      wait: yes
      instance_tags:
        Name: jira.{{ customer_name }}.nva
    register: jira

  - name: Create Web2 App EC2 instance
    ec2:
      region: "{{ region }}"
      key_name: "{{ ec2_key }}"
      image: "{{ image }}"
      instance_type: t2.micro
      group_id: "{{ webapps_sg_id }}"
      vpc_subnet_id: "{{ private_subnet_id }}"
      assign_public_ip: yes
      private_ip: 10.0.1.64
      wait: yes
      instance_tags:
        Name: conf.{{ customer_name }}.nva
    register: conf

  - name: Create Bastion EC2 instance
    ec2:
      region: "{{ region }}"
      key_name: "{{ ec2_key }}"
      image: "{{ image }}"
      instance_type: t2.micro
      group_id: "{{ jump_sg_id }}"
      vpc_subnet_id: "{{ public_subnet_id }}"
      assign_public_ip: yes
      private_ip: 10.0.0.132
      instance_tags:
        Name: jump.{{ customer_name }}.nva
      wait: yes
    register: bastion

  - name: Store bastion IP in jump_ip
    set_fact:
      jump_ip: "{{ item.public_ip }}"
    with_items: "{{ bastion.instances}}"

  - name: Add jumphost to group
    add_host:
      hostname: "{{ jump_ip }}"
      groupname: jumphost

  - name: Add conf to host group
    add_host:
      hostname: conf.{{ customer_name }}.nva
      groupname: conf
      ansible_ssh_common_args: -o ProxyCommand="ssh ec2-user@{{ jump_ip }} nc %h %p -w 10"

  - name: Add jira to host group
    add_host:
      hostname: jira.{{ customer_name }}.nva
      groupname: jira
      ansible_ssh_common_args: -o ProxyCommand="ssh ec2-user@{{ jump_ip }} nc %h %p -w 10"

  - name: Update ssh config
    blockinfile:
      path: "{{ ssh_config_path }}"
      block: |
        Host *.{{ customer_name }}.nva
            ForwardAgent yes
            User ec2-user
            IdentityFile {{ identity_file }}
            ProxyCommand ssh ec2-user@{{ jump_ip }} nc %h %p -w 10